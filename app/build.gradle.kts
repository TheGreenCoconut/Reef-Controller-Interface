/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

// TODO: Generate a JavaFX runtime image to reduce bloat (https://openjfx.io/openjfx-docs/#modular)
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id("java")
    id("application")
    id("org.openjfx.javafxplugin") version "0.1.0"
    // id("com.gradleup.shadow") version "8.3.5"
    id("edu.wpi.first.GradleRIO") version "2025.3.1"
    id("edu.wpi.first.WpilibTools") version "2.1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven("https://frcmaven.wpi.edu/artifactory/release/")
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    // Java dependencies from WPILib
    implementation(wpilibTools.deps.wpilibJava("wpiutil"))
    implementation(wpilibTools.deps.wpilibJava("wpimath"))
    implementation(wpilibTools.deps.wpilibJava("wpinet"))
    implementation(wpilibTools.deps.wpilibJava("ntcore"))
    implementation(wpilibTools.deps.wpilibJava("cscore"))
    implementation(wpilibTools.deps.wpilibJava("cameraserver"))
    implementation(wpilibTools.deps.wpilibOpenCvJava("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get()))

    // Jackson dependencies
    implementation("com.fasterxml.jackson.core:jackson-annotations:${wpi.versions.jacksonVersion.get()}")
    implementation("com.fasterxml.jackson.core:jackson-core:${wpi.versions.jacksonVersion.get()}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${wpi.versions.jacksonVersion.get()}")

    // Other dependencies
    implementation("org.ejml:ejml-simple:${wpi.versions.ejmlVersion.get()}")
    implementation("us.hebi.quickbuf:quickbuf-runtime:${wpi.versions.quickbufVersion.get()}")
}

javafx {
    version = "21"
    modules = listOf("javafx.controls", "javafx.fxml")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass.set("org.visualizer.Main")

    applicationDefaultJvmArgs = listOf(
        "-Djava.library.path=${project.buildDir}/NativeMain/AssembledResources/windows/x86-64/shared"
    )
}

// Create a configuration for WPILib natives
val nativeConfigName = "wpilibNatives"
val nativeConfig = configurations.create(nativeConfigName)

// Create native extraction tasks
val nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

// Add the native extraction tasks to the main source set resources
nativeTasks.addToSourceSetResources(sourceSets["main"])

// Tell Gradle which WPILib version to use
extra["wpilibtools.deps.wpilibVersion"] = "2023.4.2"

// Add native dependencies
nativeConfig.dependencies.add(wpilibTools.deps.wpilib("wpimath"))
nativeConfig.dependencies.add(wpilibTools.deps.wpilib("wpinet"))
nativeConfig.dependencies.add(wpilibTools.deps.wpilib("wpiutil"))
nativeConfig.dependencies.add(wpilibTools.deps.wpilib("ntcore"))
nativeConfig.dependencies.add(wpilibTools.deps.wpilib("cscore"))
nativeConfig.dependencies.add(
    wpilibTools.deps.wpilibOpenCv("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())
)

/*tasks.named<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar>("shadowJar") {
    archiveBaseName.set("TestApplication")
    archiveVersion.set("")
    exclude("module-info.class")
    archiveClassifier.set(wpilibTools.currentPlatform.platformName)
}*/
